<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Antimatter Dimensions Simplified</title>
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Roboto+Mono:wght@400;700&display=swap">
    <style>
        body {
            font-family: 'Roboto Mono', monospace;
            text-align: center;
            margin: 20px;
            background-color: #202020;
            color: white;
        }
        h1, h2 {
            margin-bottom: 20px;
        }
        .number {
            font-weight: bold;
            font-size: 2em;
        }
        .dimension {
            margin: 10px 0;
            padding: 10px;
            background-color: #333;
            border: 1px solid #555;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        .dimension.disabled {
            background-color: #555;
            cursor: not-allowed;
        }
        .dimension:hover:not(.disabled) {
            background-color: #444;
        }
        #am-per-second {
            font-size: 1em;
            color: gray;
        }
    </style>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/decimal.js/10.3.1/decimal.min.js"></script>
</head>
<body>
    <h1>Antimatter Dimensions Simplified</h1>
    
    <div id="counter">You have <span class="number">10.0</span> antimatter</div>
    <div id="am-per-second">You are gaining 0.0 antimatter per second.</div>

    <div id="tickspeed-upgrade" class="dimension" onclick="buyTickspeedUpgrade()">Tickspeed Upgrade (Cost: 1,000 | Boost: 1.00×)</div>

    <div id="dimension-boost" class="dimension" onclick="buyDimensionBoost()">Dimension Boost: Reset everything for a 2x boost to all dimensions.<br>Requires 20 4th Dimensions<br>Current Boost: 1×</div>

    <div id="boost-points">You have 0.00 Boost Points, multiplying all dimensions by 1.00×</div>
    
    <div id="exponent-upgrade" class="dimension" onclick="buyExponentUpgrade()">Upgrade exponent of BP gain by +0.2 | Cost: 1.00e15 | Current Exponent: ^3.0</div>

    <h2>Dimensions</h2>
    <div id="dimensions">
        <div id="dimension1" class="dimension disabled" onclick="buyDimension(1)">Dimension 1: 0 (Cost: 10 Antimatter)</div>
        <div id="dimension2" class="dimension disabled" onclick="buyDimension(2)">Dimension 2: 0 (Cost: 100 Antimatter)</div>
        <div id="dimension3" class="dimension disabled" onclick="buyDimension(3)">Dimension 3: 0 (Cost: 10,000 Antimatter)</div>
        <div id="dimension4" class="dimension disabled" onclick="buyDimension(4)">Dimension 4: 0 (Cost: 100,000,000 Antimatter)</div>
    </div>

    <script>
        // Load progress from cookie
        function loadProgress() {
            const savedData = document.cookie
                .split('; ')
                .find(row => row.startsWith('gameState='))
                ?.split('=')[1];

            if (savedData) {
                const data = JSON.parse(decodeURIComponent(savedData));
                antimatter = new Decimal(data.antimatter);
                dimension1 = new Decimal(data.dimension1);
                dimension2 = new Decimal(data.dimension2);
                dimension3 = new Decimal(data.dimension3);
                dimension4 = new Decimal(data.dimension4);
                tickspeedCost = new Decimal(data.tickspeedCost);
                tickspeedBoost = new Decimal(data.tickspeedBoost);
                dimensionBoosts = new Decimal(data.dimensionBoosts);
                boostPoints = new Decimal(data.boostPoints);
                exponentUpgradeCost = new Decimal(data.exponentUpgradeCost);
                exponentIncrease = new Decimal(data.exponentIncrease);
                lastAntimatter = antimatter;
            }
        }

        // Save progress to cookie
        function saveProgress() {
            const gameState = {
                antimatter: antimatter.toString(),
                dimension1: dimension1.toString(),
                dimension2: dimension2.toString(),
                dimension3: dimension3.toString(),
                dimension4: dimension4.toString(),
                tickspeedCost: tickspeedCost.toString(),
                tickspeedBoost: tickspeedBoost.toString(),
                dimensionBoosts: dimensionBoosts.toString(),
                boostPoints: boostPoints.toString(),
                exponentUpgradeCost: exponentUpgradeCost.toString(),
                exponentIncrease: exponentIncrease.toString()
            };

            document.cookie = `gameState=${encodeURIComponent(JSON.stringify(gameState))}; path=/; max-age=31536000`;
        }

        loadProgress();

        let antimatter = new Decimal(10);
        let dimension1 = new Decimal(0);
        let dimension2 = new Decimal(0);
        let dimension3 = new Decimal(0);
        let dimension4 = new Decimal(0);
        let tickspeedCost = new Decimal(1000);
        let tickspeedBoost = new Decimal(1);
        let dimensionBoosts = new Decimal(0);
        let boostPoints = new Decimal(0);

        let cost1 = new Decimal(10);
        let cost2 = new Decimal(100);
        let cost3 = new Decimal(10000);
        let cost4 = new Decimal(100000000);
        const factor1 = new Decimal(1.12);
        const factor2 = new Decimal(1.24);
        const factor3 = new Decimal(1.40);
        const factor4 = new Decimal(1.60);

        const boostFactor = new Decimal(1.12);
        const tickspeedFactor = new Decimal(4);
        let exponentUpgradeCost = new Decimal(1e15);
        let exponentIncrease = new Decimal(3);

        let lastAntimatter = antimatter;
        let antimatterPerSecond = new Decimal(0);

        setInterval(() => {
            let boostMultiplier = Decimal.pow(2, dimensionBoosts);
            let totalBoost = Decimal.pow(1 + 0.2 * boostPoints, 1);

            antimatter = antimatter.plus(dimension1.times(tickspeedBoost).times(boostMultiplier).times(totalBoost).div(50));
            dimension1 = dimension1.plus(dimension2.times(tickspeedBoost).times(boostMultiplier).times(totalBoost).div(50));
            dimension2 = dimension2.plus(dimension3.times(tickspeedBoost).times(boostMultiplier).times(totalBoost).div(50));
            dimension3 = dimension3.plus(dimension4.times(tickspeedBoost).times(boostMultiplier).times(totalBoost).div(50));

            document.getElementById("counter").innerHTML = `You have <span class="number">${formatNumber(antimatter)}</span> antimatter`;

            antimatterPerSecond = antimatter.minus(lastAntimatter).times(50);
            lastAntimatter = antimatter;
            document.getElementById("am-per-second").textContent = `You are gaining ${formatNumber(antimatterPerSecond)} antimatter per second.`;

            updateDimensionButtons();
        }, 20);

        setInterval(() => {
            boostPoints = boostPoints.plus(Decimal.pow(dimensionBoosts, exponentIncrease).div(5000));
            let totalBoost = Decimal.pow(1 + 0.2 * boostPoints, 1);
            document.getElementById("boost-points").textContent = `You have ${formatNumber(boostPoints)} Boost Points, multiplying all dimensions by ${formatNumber(totalBoost)}×`;
        }, 20);

        function updateDimensionButtons() {
            let boostMultiplier = Decimal.pow(2, dimensionBoosts);

            document.getElementById("dimension1").innerHTML = `Dimension 1: ${formatNumber(dimension1)} (Cost: ${formatNumber(cost1)})`;
            document.getElementById("dimension2").innerHTML = `Dimension 2: ${formatNumber(dimension2)} (Cost: ${formatNumber(cost2)})`;
            document.getElementById("dimension3").innerHTML = `Dimension 3: ${formatNumber(dimension3)} (Cost: ${formatNumber(cost3)})`;
            document.getElementById("dimension4").innerHTML = `Dimension 4: ${formatNumber(dimension4)} (Cost: ${formatNumber(cost4)})`;

            document.getElementById("dimension1").classList.toggle("disabled", antimatter.lessThan(cost1));
            document.getElementById("dimension2").classList.toggle("disabled", antimatter.lessThan(cost2));
            document.getElementById("dimension3").classList.toggle("disabled", antimatter.lessThan(cost3));
            document.getElementById("dimension4").classList.toggle("disabled", antimatter.lessThan(cost4));

            document.getElementById("tickspeed-upgrade").innerHTML = `Tickspeed Upgrade (Cost: ${formatNumber(tickspeedCost)} | Boost: ${tickspeedBoost.toFixed(2)}×)`;
            document.getElementById("tickspeed-upgrade").classList.toggle("disabled", antimatter.lessThan(tickspeedCost));

            document.getElementById("dimension-boost").innerHTML = `Dimension Boost: Reset everything for a 2x boost to all dimensions.<br>Requires ${formatNumber(boostFactor.times(20))} 4th Dimensions<br>Current Boost: ${formatNumber(boostMultiplier)}×`;
            document.getElementById("dimension-boost").classList.toggle("disabled", dimension4.lessThan(boostFactor.times(20)));

            document.getElementById("exponent-upgrade").innerHTML = `Upgrade exponent of BP gain by +0.2 | Cost: ${formatNumber(exponentUpgradeCost)} | Current Exponent: ^${formatNumber(exponentIncrease)}`;
            document.getElementById("exponent-upgrade").classList.toggle("disabled", antimatter.lessThan(exponentUpgradeCost));
        }

        function buyTickspeedUpgrade() {
            if (antimatter.greaterThanOrEqualTo(tickspeedCost)) {
                antimatter = antimatter.minus(tickspeedCost);
                tickspeedCost = tickspeedCost.times(tickspeedFactor);
                tickspeedBoost = tickspeedBoost.times(boostFactor);
                updateDimensionButtons();
            }
        }

        function buyDimensionBoost() {
            if (dimension4.greaterThanOrEqualTo(boostFactor.times(20))) {
                antimatter = new Decimal(10);
                dimension1 = new Decimal(0);
                dimension2 = new Decimal(0);
                dimension3 = new Decimal(0);
                dimension4 = new Decimal(0);
                cost1 = new Decimal(10);
                cost2 = new Decimal(100);
                cost3 = new Decimal(10000);
                cost4 = new Decimal(100000000);
                dimensionBoosts = dimensionBoosts.plus(1);
                boostPoints = boostPoints.plus(Decimal.pow(dimensionBoosts, exponentIncrease).div(5000));
                updateDimensionButtons();
            }
        }

        function buyExponentUpgrade() {
            if (antimatter.greaterThanOrEqualTo(exponentUpgradeCost)) {
                antimatter = antimatter.minus(exponentUpgradeCost);
                exponentIncrease = exponentIncrease.plus(0.2);
                exponentUpgradeCost = exponentUpgradeCost.times(1e9);
                updateDimensionButtons();
            }
        }

        function buyDimension(dimensionNumber) {
            if (dimensionNumber === 1 && antimatter.greaterThanOrEqualTo(cost1)) {
                antimatter = antimatter.minus(cost1);
                dimension1 = dimension1.plus(1);
                cost1 = cost1.times(factor1);
            } else if (dimensionNumber === 2 && antimatter.greaterThanOrEqualTo(cost2)) {
                antimatter = antimatter.minus(cost2);
                dimension2 = dimension2.plus(1);
                cost2 = cost2.times(factor2);
            } else if (dimensionNumber === 3 && antimatter.greaterThanOrEqualTo(cost3)) {
                antimatter = antimatter.minus(cost3);
                dimension3 = dimension3.plus(1);
                cost3 = cost3.times(factor3);
            } else if (dimensionNumber === 4 && antimatter.greaterThanOrEqualTo(cost4)) {
                antimatter = antimatter.minus(cost4);
                dimension4 = dimension4.plus(1);
                cost4 = cost4.times(factor4);
            }
            updateDimensionButtons();
        }

        function formatNumber(number) {
            if (number.greaterThanOrEqualTo(1e6)) {
                return number.toExponential(2).replace('e+', 'e');
            } else {
                return number.toFixed(2);
            }
        }

        setInterval(saveProgress, 5000); // Save progress every 5 seconds
    </script>
</body>
</html>
